#package_name: dbms_profiler
#author: heyongyi.hyy

CREATE OR REPLACE PACKAGE BODY DBMS_PROFILER
AS

  RUN_STATUS VARCHAR2(64) := NULL;

  USER_SCHEMA VARCHAR2(128) := NULL;

  PROFILER_PAUSED CONSTANT BINARY_INTEGER := 0;
  PROFILER_RESUMED CONSTANT BINARY_INTEGER := 1;

  FUNCTION INTERNAL_VERSION_CHECK_INNER(major IN BINARY_INTEGER,
                                        minor IN BINARY_INTEGER)
  RETURN BINARY_INTEGER;
  PRAGMA INTERFACE(c, DBMS_PROFILER_CHECK_VERSION);


  FUNCTION INTERNAL_VERSION_CHECK RETURN BINARY_INTEGER IS
  BEGIN
    RETURN INTERNAL_VERSION_CHECK_INNER(major_version, minor_version);
  END INTERNAL_VERSION_CHECK;



  FUNCTION START_PROFILER_INNER_C(RUN_COMMENT IN VARCHAR2,
                                  RUN_COMMENT1 IN VARCHAR2,
                                  RUN_NUMBER OUT BINARY_INTEGER)
  RETURN BINARY_INTEGER;
  PRAGMA INTERFACE(c, DBMS_PROFILER_START_PROFILER);


  FUNCTION START_PROFILER_INNER(RUN_COMMENT IN VARCHAR2,
                                RUN_COMMENT1 IN VARCHAR2,
                                RUN_NUMBER OUT BINARY_INTEGER)
  RETURN BINARY_INTEGER IS
  local_runid BINARY_INTEGER;
  ret BINARY_INTEGER;
  BEGIN
    IF (RUN_STATUS IS NULL) THEN
      ret := START_PROFILER_INNER_C(run_comment, run_comment1, local_runid);
      IF (ret = SUCCESS) THEN
        RUN_NUMBER := local_runid;
        RUN_STATUS := local_runid || '@' || PROFILER_RESUMED;
      END IF;
      RETURN ret;
    ELSE
      RETURN SUCCESS;
    END IF;
  END START_PROFILER_INNER;


  FUNCTION START_PROFILER(RUN_COMMENT IN VARCHAR2 := SYSDATE,
                          RUN_COMMENT1 IN VARCHAR2 := '',
                          RUN_NUMBER OUT BINARY_INTEGER)
  RETURN BINARY_INTEGER IS
  BEGIN
    IF (INTERNAL_VERSION_CHECK <> 0) THEN
      RETURN ERROR_VERSION;
    END IF;
    RETURN START_PROFILER_INNER(RUN_COMMENT, RUN_COMMENT1, RUN_NUMBER);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN ERROR_IO;
  END START_PROFILER;


  FUNCTION START_PROFILER(RUN_COMMENT IN VARCHAR2 := SYSDATE,
                          RUN_COMMENT1 IN VARCHAR2 := '')
  RETURN BINARY_INTEGER IS
    RUN_NUMBER BINARY_INTEGER;
  BEGIN
    RETURN START_PROFILER(RUN_COMMENT, RUN_COMMENT1, RUN_NUMBER);
  END;


  PROCEDURE START_PROFILER(RUN_COMMENT IN VARCHAR2 := SYSDATE,
                          RUN_COMMENT1 IN VARCHAR2 := '',
                          RUN_NUMBER OUT BINARY_INTEGER) IS
    FUNC_RET BINARY_INTEGER;
  BEGIN
    IF (INTERNAL_VERSION_CHECK <> 0) THEN
      RAISE VERSION_MISMATCH;
    END IF;

    BEGIN
      FUNC_RET := START_PROFILER_INNER(RUN_COMMENT, RUN_COMMENT1, RUN_NUMBER);
      EXCEPTION
        WHEN OTHERS THEN
          RAISE PROFILER_ERROR;
    END;
    IF (FUNC_RET != SUCCESS)
    THEN
      RAISE PROFILER_ERROR;
    END IF;

  END START_PROFILER;


  PROCEDURE START_PROFILER(RUN_COMMENT IN VARCHAR2 := SYSDATE,
                          RUN_COMMENT1 IN VARCHAR2 := '') IS
    RUN_NUMBER BINARY_INTEGER;
  BEGIN
    START_PROFILER(RUN_COMMENT, RUN_COMMENT1, RUN_NUMBER);
  END START_PROFILER;



  FUNCTION STOP_PROFILER_INNER_C RETURN BINARY_INTEGER;
  PRAGMA INTERFACE(c, DBMS_PROFILER_STOP_PROFILER);


  FUNCTION STOP_PROFILER_INNER RETURN BINARY_INTEGER IS
  ret BINARY_INTEGER;
  BEGIN
    IF (RUN_STATUS IS NOT NULL) THEN
      PAUSE_PROFILER();
      FLUSH_DATA();
      ret := STOP_PROFILER_INNER_C;
      RUN_STATUS := NULL;
      RETURN ret;
    ELSE
      RETURN SUCCESS;
    END IF;
  END;


  FUNCTION STOP_PROFILER RETURN BINARY_INTEGER IS
  BEGIN
    IF (INTERNAL_VERSION_CHECK <> 0) THEN
      RETURN ERROR_VERSION;
    END IF;
    RETURN STOP_PROFILER_INNER;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN ERROR_IO;
  END STOP_PROFILER;


  PROCEDURE STOP_PROFILER IS
    FUNC_RET BINARY_INTEGER;
  BEGIN
    IF (INTERNAL_VERSION_CHECK <> 0) THEN
      RAISE VERSION_MISMATCH;
    END IF;

    BEGIN
      FUNC_RET := STOP_PROFILER_INNER;
    EXCEPTION
      WHEN OTHERS THEN
        RAISE PROFILER_ERROR;
    END;
    IF (FUNC_RET != SUCCESS)
    THEN
      RAISE PROFILER_ERROR;
    END IF;
  END STOP_PROFILER;



  FUNCTION CHANGE_PROFILER_STATE_INNER_C(new_state IN BINARY_INTEGER)
  RETURN BINARY_INTEGER;
  PRAGMA INTERFACE(c, DBMS_PROFILER_CHANGE_STATE);


  FUNCTION CHANGE_PROFILER_STATE_INNER(new_state IN BINARY_INTEGER)
  RETURN BINARY_INTEGER IS
  ret BINARY_INTEGER := success;
  local_runid BINARY_INTEGER := -1;
  BEGIN
    IF (RUN_STATUS IS NOT NULL) THEN
      ret := CHANGE_PROFILER_STATE_INNER_C(new_state);

      IF (ret = success) THEN
        local_runid := substr(RUN_STATUS, 1, INSTR(RUN_STATUS, '@') - 1);
        CASE new_state
          WHEN profiler_paused THEN
            RUN_STATUS := local_runid || '@' || PROFILER_PAUSED;
          WHEN profiler_resumed THEN
            RUN_STATUS := local_runid || '@' || PROFILER_RESUMED;
          ELSE
            ret := error_param;
        END CASE;
      END IF;
    END IF;

    RETURN ret;
  END;


  FUNCTION PAUSE_PROFILER RETURN BINARY_INTEGER IS
  BEGIN
    IF (INTERNAL_VERSION_CHECK <> 0) THEN
      RETURN ERROR_VERSION;
    END IF;
    RETURN CHANGE_PROFILER_STATE_INNER(profiler_paused);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN ERROR_IO;
  END;


  PROCEDURE PAUSE_PROFILER IS
    FUNC_RET BINARY_INTEGER;
  BEGIN
    IF (INTERNAL_VERSION_CHECK <> 0) THEN
      RAISE VERSION_MISMATCH;
    END IF;

    BEGIN
      FUNC_RET := CHANGE_PROFILER_STATE_INNER(profiler_paused);
    EXCEPTION
      WHEN OTHERS THEN
        RAISE PROFILER_ERROR;
    END;
    IF (FUNC_RET != SUCCESS)
    THEN
      RAISE PROFILER_ERROR;
    END IF;

  END PAUSE_PROFILER;



  FUNCTION RESUME_PROFILER RETURN BINARY_INTEGER IS
  BEGIN
    IF (INTERNAL_VERSION_CHECK <> 0) THEN
      RETURN ERROR_VERSION;
    END IF;
    RETURN CHANGE_PROFILER_STATE_INNER(profiler_resumed);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN ERROR_IO;
  END;


  PROCEDURE RESUME_PROFILER IS
    FUNC_RET BINARY_INTEGER;
  BEGIN
    IF (INTERNAL_VERSION_CHECK <> 0) THEN
      RAISE VERSION_MISMATCH;
    END IF;

    BEGIN
      FUNC_RET := CHANGE_PROFILER_STATE_INNER(profiler_resumed);
    EXCEPTION
      WHEN OTHERS THEN
        RAISE PROFILER_ERROR;
    END;
    IF (FUNC_RET != SUCCESS)
    THEN
      RAISE PROFILER_ERROR;
    END IF;

  END RESUME_PROFILER;



  FUNCTION FLUSH_DATA_INNER RETURN BINARY_INTEGER;
  PRAGMA INTERFACE(c, DBMS_PROFILER_FLUSH_DATA);


  FUNCTION FLUSH_DATA RETURN BINARY_INTEGER IS
  BEGIN
    IF (INTERNAL_VERSION_CHECK <> 0) THEN
      RETURN ERROR_VERSION;
    END IF;
    RETURN FLUSH_DATA_INNER;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN ERROR_IO;
  END FLUSH_DATA;

  PROCEDURE FLUSH_DATA IS
    FUNC_RET BINARY_INTEGER;
  BEGIN
    IF (INTERNAL_VERSION_CHECK <> 0) THEN
      RAISE VERSION_MISMATCH;
    END IF;
    BEGIN
      FUNC_RET := FLUSH_DATA_INNER;
    EXCEPTION
      WHEN OTHERS THEN
        RAISE PROFILER_ERROR;
    END;
    IF (FUNC_RET != SUCCESS)
    THEN
      RAISE PROFILER_ERROR;
    END IF;
  END FLUSH_DATA;



  PROCEDURE ROLLUP_UNIT(RUN_NUMBER IN NUMBER, UNIT IN NUMBER) IS
  C VARCHAR2(1000);
  BEGIN
     C :=
                'update plsql_profiler_units set total_time = ' ||
                        '(select sum(total_time) from plsql_profiler_data ' ||
            'where runid = ' || RUN_NUMBER || ' and unit_number = ' || UNIT ||
                    ') ' ||
        'where runid = ' || RUN_NUMBER || ' and unit_number = ' || UNIT;
        EXECUTE IMMEDIATE C;
    COMMIT;
  END ROLLUP_UNIT;



  PROCEDURE ROLLUP_RUN(RUN_NUMBER IN NUMBER) IS
    C VARCHAR2(1000);
  BEGIN
      C := 'update plsql_profiler_units p1 ' ||
                  ' set total_time = (select sum(total_time) ' ||
              ' from  plsql_profiler_data p2 ' ||
                          ' where runid= ' || RUN_NUMBER ||
                            ' and p2.unit_number=p1.unit_number) ' ||
                    ' where runid= ' || RUN_NUMBER;
    EXECUTE IMMEDIATE C;
        COMMIT;
  END ROLLUP_RUN;



  PROCEDURE GET_VERSION(MAJOR OUT BINARY_INTEGER,
                        MINOR OUT BINARY_INTEGER) IS
  BEGIN
    MAJOR := MAJOR_VERSION;
    MINOR := MINOR_VERSION;
  END GET_VERSION;

  PROCEDURE OB_INIT_OBJECTS(FORCE_CREATE IN BOOLEAN := FALSE);
  PRAGMA INTERFACE(c, DBMS_PROFILER_INIT_OBJECTS);

  PROCEDURE OB_DROP_OBJECTS;
  PRAGMA INTERFACE(c, DBMS_PROFILER_DROP_OBJECTS);

END;



//